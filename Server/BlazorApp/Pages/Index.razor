@page "/"
@attribute [Authorize]

@using System.IO
@using ExportToExcel.Components
@using ExportToExcel
@using Domain.IdentityManagement.UserAggregate
@using Microsoft.AspNetCore.Identity
@using NPOI.SS.UserModel

<div class="container p-0 m-0">
    <fieldset>
        <legend>Header Style</legend>

        <ExcelColorSelector OnColorSelected="HandleHeaderColorSelected" />

        <ExcelHorizontalAlignmentSelector OnSelected="HandleHeaderHorizontalAlignmentSelected" />

        <ExcelVerticalAlignmentSelector OnSelected="HandleHeaderVerticalAlignmentSelected" />
    </fieldset>

    <fieldset>
        <legend>Body Style</legend>

        <ExcelColorSelector OnColorSelected="HandleBodyColorSelected" />

        <ExcelHorizontalAlignmentSelector OnSelected="HandleBodyHorizontalAlignmentSelected" />

        <ExcelVerticalAlignmentSelector OnSelected="HandleBodyVerticalAlignmentSelected" />
    </fieldset>

    <ExcelExport ButtonText=UserButtonText
                 CssClass="btn btn-outline-success"
                 ReportName=@UserReportName
                 TValue="UserSpreadSheet"
                 HeaderStyle="HeaderStyle"
                 BodyStyle="BodyStyle"
                 RequestDelegate="ExportUserRequest"
                 DownloadToBrowser="DownloadFile" />
</div>

@code{

    [Inject] UserManager<User> UserManager { get; set; }

    HeaderStyle HeaderStyle { get; set; } = new HeaderStyle();

    BodyStyle BodyStyle { get; set; } = new BodyStyle();

    string UserButtonText => "Export Users To Excel";

    string UserReportName => "Users Report";

    string FileName => $"{ DateTime.UtcNow.ToString("MM:dd:yyyy:hh:mm:ss") }";

    string Source { get; set; }    

    IEnumerable<UserSpreadSheet> ExportUserRequest()
    {
        return UserManager.Users.Cast<UserSpreadSheet>().ToList();
    }    

    Task<UploadResponse> DownloadFile(ExcelDocumentResponse Response)
    {
        var response = new UploadFileLocalResponse
        {
            FileName = Response.FileName,
            ContentType = ExcelConstants.ContentType,
            FileContent = Convert.ToBase64String(Response.SpreadSheetBytes)
        };

        Source = response.FileContent;

        return Task.FromResult(response as UploadResponse);
    }

    void HandleHeaderColorSelected(StyleColorSelectedEventArgs a)
    {
        HeaderStyle.SetForegroundColor(a);
    }
    void HandleBodyColorSelected(StyleColorSelectedEventArgs a)
    {
        BodyStyle.SetForegroundColor(a);
    }
    void HandleHeaderHorizontalAlignmentSelected(HorizontalAlignmentChangedEventArgs a)
    {
        HeaderStyle.SetHorizontalAlignment(a);
    }
    void HandleBodyHorizontalAlignmentSelected(HorizontalAlignmentChangedEventArgs a)
    {
        BodyStyle.SetHorizontalAlignment(a);
    }
    void HandleHeaderVerticalAlignmentSelected(VerticalAlignmentChangedEventArgs a)
    {
        HeaderStyle.SetVerticalAlignment(a);
    }
    void HandleBodyVerticalAlignmentSelected(VerticalAlignmentChangedEventArgs a)
    {
        BodyStyle.SetVerticalAlignment(a);
    }
}
